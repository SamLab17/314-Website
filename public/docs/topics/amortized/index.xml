<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amortized Analysis on Sam&#39;s CS314 Site</title>
    <link>https://www.cs.utexas.edu/~slaberge/docs/topics/amortized/</link>
    <description>Recent content in Amortized Analysis on Sam&#39;s CS314 Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 May 2020 19:31:31 -0500</lastBuildDate>
    
	<atom:link href="https://www.cs.utexas.edu/~slaberge/docs/topics/amortized/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dynamic Arrays</title>
      <link>https://www.cs.utexas.edu/~slaberge/docs/topics/amortized/dynamic_arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.cs.utexas.edu/~slaberge/docs/topics/amortized/dynamic_arrays/</guid>
      <description>Amortized Analysis of Dynamic Arrays #  The classic example of amortized analysis is appending to the end of a dynamic array. In Java, this would be the add() method as part of the ArrayList class. When we insert into a dynamic array there are two possible behaviors:
 There is still room in the array and we can simply add the value into the array. There is no more room in the array so we need to make a new, larger array, copy over all the elements into the new array, and then finally add the new value.</description>
    </item>
    
  </channel>
</rss>