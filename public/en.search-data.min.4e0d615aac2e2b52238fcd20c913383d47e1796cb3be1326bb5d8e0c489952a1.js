'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/~slaberge/docs/topics/amortized/dynamic_arrays/','title':"Dynamic Arrays",'content':"Amortized Analysis of Dynamic Arrays #  The classic example of amortized analysis is appending to the end of a dynamic array. In Java, this would be the add() method as part of the ArrayList class. When we insert into a dynamic array there are two possible behaviors:\n There is still room in the array and we can simply add the value into the array. There is no more room in the array so we need to make a new, larger array, copy over all the elements into the new array, and then finally add the new value.  The first situation is \\(O(1)\\) whereas the second is \\(O(N)\\) (where \\(N\\) is the number of elements in the ArrayList1). The average, or amortized order of appending to a dynamic array will depend on how often we have to resize. When we resize, we have two options for large to make the new internal array:\n We could increase the size of the internal array by a constant \\(k\\) We could increase the size of the internal array by a constant factor \\(k\\)  Let\u0026rsquo;s do an amortized analysis for both cases. We will add \\( N + 1 \\) elements to the lists (it makes the math a bit nicer than adding \\( N \\)). For both cases we assume \\(N \\gg k \\).\nIncrease by a Constant \\( k \\) #  Suppose we start with an array of size \\( k \\). Once we try to add the \\(k + 1^{th}\\) element to the list, we will need to resize. In this case we will add another \\( k \\) spots to our internal array, creating a new array of size \\(2k\\) and copy our \\(k\\) elements over into the new array. When we try to add the \\(2k + 1^{th}\\) element, we\u0026rsquo;ll resize again and copy over \\(2k\\) elements.\nLet\u0026rsquo;s add up how many copies we\u0026rsquo;ll need to make in the process of adding \\(N+1\\) elements to the array. In the very worst case, we\u0026rsquo;ll need to copy over a maximum of \\(N\\) elements before we can add the \\(N + 1^{th}\\) element; let\u0026rsquo;s assume that worst case:\n\\[ \\text{Number of copies} = k + 2k + 3k + \u0026hellip; + N = k \\left ( 1 + 2 + 3 + \u0026hellip; + \\frac{N}{k} \\right ) \\]\nBy factoring out the \\(k\\), we can evaluate the sum on the right hand side:\n\\[ k \\left( 1 + 2 + 3 + \u0026hellip; + \\frac{N}{k} \\right ) = k \\left ( \\frac{(\\frac{N}{k})(\\frac{N}{k} + 1)}{2} \\right ) \\approx O(N^2) \\]\nThus, the process of copying over all of the elements while resizing takes \\(O(N^2)\\) time. Dividing this by the \\(N + 1\\) insertions, the amortized cost for each call to add() would be:\n\\[ \\frac{O(N^2)}{N+1} \\approx O(N) \\]\nIncrease by a Constant Factor \\(k\\) #  If we increase the size by a constant factor, we say that the length of the internal array grows geometrically (as in a geometric series). For simplicity, let\u0026rsquo;s first consider the case where \\(k = 2 \\), then we can look at the more general case (although both will have the same conclusion).\nDoubling the Size (\\(k = 2\\)) #  Suppose we started with an internal array of size 1 (really ridiculous, I know, but it makes the math more apparent). Once we try to add the second element to the list, we\u0026rsquo;ll need to resize our array to a size of 2 and copy our one element over. When we try to add the third element, our array will grow to a size of 4 and we\u0026rsquo;ll copy over the 2 elements from before. etc. Let\u0026rsquo;s again look at how many elements we\u0026rsquo;ll need to copy over during the course of adding \\(N + 1\\) elements:\n\\[ 1 + 2 + 4 + \u0026hellip; + N = 2N - 1 \\approx O(N) \\]\nHad we started with an array of size \\( \u0026gt; 1 \\), we could just factor it out in the sum above and get the same answer.  Thus, the copying over of elements when we resize only takes \\( O(N)\\) time. Dividing this by the \\(N+1\\) insertions, the amortized cost for each call to add() would be:\n\\[ \\frac{O(N)}{N+1} \\approx O(1) \\]\nGeneralized to Any Factor \\( (k \u0026gt; 1)\\) #  If we generalize to any factor \\(k\\), the logic from above stays about the same. However, the sum will change:\n\\[ k^0 + k^1 + k^2 + \u0026hellip; + N = \\sum_{i=0}^{\\log_{k}{N}}{k^i} \\]\nThis is a geometric sum and the formula for a partial geometric sum is:\n\\[ \\sum_{i=0}^{\\log_{k}{N}}{k^i} = \\frac{k^{\\log_k{N}+1}-1}{k-1} = \\frac{k^{\\log_k{N}}k + 1}{k-1} = \\frac{Nk + 1}{k-1} \\approx O(N) \\]\nThus, resizing by any factor \\(k\\) also results in \\(O(N)\\) time for resizing.\nConculsion #  The Big O of adding to the end of a dynamic array, ArrayList in Java, depends on the resize behavior. If we simply add a constant \\(k\\) to the size every time, then adding to the end of the array is on average \\(O(N)\\). If we increase the size by a factor (we multiply the size), adding to then end is on average \\(O(1)\\).\nFootnotes #  1 In Java, \\(N\\) would actually be the size of the new array container because Java will initialize all elements in the array to null. However, in other languages this initialization is not done and it will be simpler to use this definition of \\(N\\) when doing the amortized analysis.\n  \\(\\)  "});index.add({'id':1,'href':'/~slaberge/docs/topics/','title':"Topics",'content':""});index.add({'id':2,'href':'/~slaberge/docs/topics/slides/','title':"Discussion Slides",'content':"Discussion Section Slides #  August 31, 2020 #  Slides Download\n"});index.add({'id':3,'href':'/~slaberge/docs/lab_machines/ssh/','title':"Getting Connected",'content':""});index.add({'id':4,'href':'/~slaberge/docs/exam_review/identities/','title':"Identities to Know",'content':"Identities to Know #  Here is a list of some important identities and properties to know for CS314 (especially for exams).\nPowers of 2 Approximations #  $$ \\begin{aligned} \\log_2{(1,000)} \u0026amp;\\approx 10 \u0026amp; 2^{10} \u0026amp; \\approx 1,000 \\\\ \\log_2{(1,000,000)} \u0026amp;\\approx 20 \u0026amp; 2^{20} \u0026amp; \\approx 1,000,000 \\end{aligned} $$\nLogarithm Product \u0026amp; Quotient Rules #  $$ \\log{(ab)} = \\log{a} + \\log{b} $$ $$ \\log{\\left(\\frac{a}{b}\\right)} = \\log{a} - \\log{b} $$\nSum of Consecutive Integers #  $$ 1 + 2 + 3 + 4 + \u0026hellip; + N = \\frac{N(N+1)}{2} $$\nBy Arithmetic $$ \\text{Let } S_{N} = 1 + 2 + \u0026hellip; + (N-1) + N $$\nNow add \\(S_{N} \\) with itself but reverse the order of the terms.\n$$ \\hspace{4pt} S_{N} = 1 + 2 + \u0026hellip; + (N-1) + N $$\n$$ + \\frac{S_{N} = N + (N-1) + \u0026hellip; + 2 + 1}{2S_{N} = (N+1) + (N+1) + \u0026hellip; + (N+1)} $$\nThis gives us \\(N\\) number of \\((N+1)\\) terms. Dividing by two on both sides:\n$$ 2S_{N} = N(N+1) \\rightarrow S_{N} = \\frac{N(N+1)}{2} $$\n  Proof by Induction Let\u0026rsquo;s prove \\( \\sum_{i = 1}^{N}{i} = \\frac{N(N+1)}{2} \\) by induction.\nFirst, let\u0026rsquo;s ensure the property holds for the base case \\( N = 1 \\):\n$$ 1 \\stackrel{?}{=} \\frac{1(1 + 1)}{2} = \\frac{2}{2} = 1 $$\nNow, let\u0026rsquo;s assume that the property when \\(N = k\\) where \\(k \\) is some integer \\( \\geq 1 \\). This our inductive hypothesis:\n$$ \\sum_{i = 1}^{k}{i} = \\frac{k(k+1)}{2} $$\nNow, let\u0026rsquo;s see if the property also holds for \\(k+1\\). From the property, we would expect to see that \\( \\sum_{i=1}^{k+1}{i} = \\frac{(k+1)(k+2)}{2} \\).\n$$ 1 + 2 + 3 + \u0026hellip; + k + (k+1) = \\sum_{i = 1}^{k}{i} + (k+1) = \\frac{k(k+1)}{2} + (k+1) $$\n$$ = \\frac{k^2 + k}{2} + \\frac{2(k+1)}{2} = \\frac{k^2 + 3k + 2}{2} = \\frac{(k+1)(k+2)}{2} \\quad \\square $$\nWhich is the answer we would expect from the property.\n  Geomteric Visualization     Sum of Powers of Two #  $$ 1 + 2 + 4 + 8 + \u0026hellip; + N = 2N - 1 $$\n(Where \\( N \\) is a power of \\(2 \\))\nProof by Induction To prove this property, I\u0026rsquo;m going to rewrite the sum slightly. Let \\( n = \\log_2{N} \\), i.e. \\( 2^n = N \\).\n$$ 1 + 2 + 4 + 8 + \u0026hellip; + 2^n = 2N - 1 = 2(2^n) - 1 = 2^{n+1} - 1 $$\nLet\u0026rsquo;s ensure that the property holds for the base case where \\( n = 0 \\):\n$$ 1 \\stackrel{?}{=} 2^{0 + 1} - 1 = 1 $$\nNow, we make our inductive hypothesis. Let\u0026rsquo;s assume the property holds for \\(n = k\\) where \\(k \\) is an integer \\( \\geq 0\\). We take the following to be true:\n$$ 1 + 2 + 4 + \u0026hellip; + 2^k = 2^{k+1} - 1 $$\nNow, let\u0026rsquo;s see if, given that the inductive hypothesis is true, the property holds for \\(n = k+1\\). Based on the property, we would expect the sum up to \\(2^{k+1}\\) to equal \\(2^{k+2} - 1 \\).\n$$ 1 + 2 + 4 + \u0026hellip; + 2^k + 2^{k+1} = \\left( 2^{k+1} - 1\\right) + 2^{k+1} $$\n$$ = 2 \\left(2^{k+1} \\right) - 1 = 2^{k+2} - 1 \\quad \\square $$\n    \\(\\)  "});index.add({'id':5,'href':'/~slaberge/docs/exam_review/practice_questions/topics/','title':"Problems by Topic",'content':"Programming Problems by Topic #  Array-based Lists #  Insert All Front\nRemove Odd Indices\nSorted List Insert\nLinked Lists #  Reverse Doubly Linked List\nMerge Two Linked Lists\nLinked List Sums\nAdd to Linked List of Digits\nMaps #  Sum Tabs\nMost Frequent Element\nBinary Trees #  Get Grandparent\nBinary Subtrees\nVerify Binary Search Trees\nHash Tables #  Hash Table Contains\nHash Set Difference\nHash Table Resize\nGraphs #  Maximum In-Degree\nBipartite Graphs\n"});index.add({'id':6,'href':'/~slaberge/docs/lab_machines/ssh/vpn/','title':"The UT VPN",'content':"The UT VPN #  Using the UT VPN will make it appear as though you are connected to UT\u0026rsquo;s on-campus internet. This can be very useful even outside of CS. If you are trying to access the UT library, online academic journals, or other university resources, you may need to use the VPN when off campus.\nHere, we will need to use the VPN to allow us to connect to the CS Department\u0026rsquo;s Lab Machines.\nForeword on VPNs #  When you connect to a VPN, all of your Internet traffic will be routed through that VPN service. This is true of all VPN services, including UT\u0026rsquo;s. Although I doubt UT has any nefarious intents, realize that VPN services could get a lot of information on you based on your internet activity.\nTherefore, as a general security principle, only use a VPN when you absolutely have to. In the case of UT\u0026rsquo;s VPN, you should only use it while you are connected to a CS machine, trying to access library documents, etc. Disconnect from the VPN when you are done.\nIn the case of the CS lab machines, only use the VPN to set up your SSH keys, and then you will not have to connect to the VPN afterwards to connect to the lab machines.\nPrerequisites #   Make sure you have DUO two-factor authentication set up. You can do this by following this guide.  Setting up the VPN #  These steps should be the same for Windows, Mac, and Linux.\nDownloading the VPN Software #  Visit vpn.utexas.edu and log in using your UT EID.\nIt will then ask you to authenticate using DUO. Choose an authentication method to proceed.\nYou will then need to install a piece of software by Cisco which will set up the VPN on your device.\nClick on the \u0026ldquo;Instructions\u0026rdquo; button if you would like instructions on how to install the software.\nConnecting to the VPN #  Once you are finished installing, open the \u0026ldquo;Cisco AnyConnect Secure Mobility Client\u0026rdquo;. You should see the following window.\nType vpn.utexas.edu in the field and click connect.\nYou will then be shown an authentication window.\nIn the Username field, enter your UT EID.\nIn the Password field enter the password associated with your UT EID.\nIn the last field, Duo passcode, you can enter any of the following options:\n push - This will send a push notification to your authorized DUO device. sms - This will send an SMS message to your DUO-authorized phone number. phone - This will call your DUO-authorized phone number.  Click Ok and then, with your selected authentication method, provide two-factor authentication to connect.\nIf everything was successful, you should see a message indicating you successfully connected to the VPN!\n"});index.add({'id':7,'href':'/~slaberge/docs/lab_machines/tutorials/transferring/','title':"Transferring Files",'content':"Transferring Files #  To transfer files to and from the CS department\u0026rsquo;s lab machines, we will use a file transfer protocol named SFTP (SSH File Transfer Protocol).\nOn macOS and Linux, you can transfer files over SFTP using the scp command. However, the command can be quite cumbersome and having a GUI application makes transferring files much easier.\nBelow are some graphical applications for all operating systems which support SFTP.\nWindows WinSCP This is a free and open-source SFTP client for Windows. It is available for download here. (Be careful of the advertisements at the top of the page)\nUsing SSH Keys with WinSCP Make sure you have followed the guide for setting up SSH keys on windows [here](https://www.cs.utexas.edu facilities-documentation/ssh-keys-cs-windows-10).\nNext, open the dialog to create a new connection.\nEnter the name of a lab machine (linux.cs.utexas.edu works for this purpose) and your CS username. Make sure the File protocol is set to SFTP.\nNow, enter the Advanced menu. Under SSH \u0026gt; Key Exchange, move RSA-based key excahnge to the top of the Algorithm Selection Policy list. This can be done by selecting it and clicking the Up button.\nAfter than, go to SSH \u0026gt; Authentication. Here, we have to tell WinSCP where our Private key is located. If you left it in the default location with the default file name, it will be called id_rsa and will be in a directory named .ssh in your Users directory. Select that file or provide the full path to the file.\nThen, you may get an error that WinSCP only supports PuTTY style keys. If you are given the option to convert it to a PuTTY key, then do so.\nIf that option is not presented to you, you can sometimes make WinSCP show it to you by clicking the Display public key button. This is the dialog you should see:\nOnce the key has been converted and selected, you are done in the Advanced settings and you can connect to the lab machine. You will then be prompted for the passphrase associated with your key, if you have one.\nOnce connected to the remote machine, you will be provided with a split view. One side will be the files on your personal machine and the other side will be the files on the CS machine. You can simply drag-and-drop files between the two sides of the window to start transferring files.\nmacOS Cyberduck Cyberduck Download (Free version)\nCyberduck allows you to transfer files between your local computer and remote machines. It is available for both Mac and Windows.\nSimpler UI than FileZilla and, in my experience, more intuitive to use alongside with the Mac\u0026rsquo;s Finder.\nOnly downside is everytime you quit the app it asks you to donate. If this drives you insane, then consider using FileZilla (or just donate I guess).\nHow to Connect to the Lab Machines with Cyberduck When you first open Cyberduck, you should see a window similar to the screenshot below. Press the \u0026ldquo;Open Connection\u0026rdquo; button in the top left to start a new SFTP connection.\nAn open connection menu should pop up. In the drop down, select \u0026ldquo;SFTP\u0026rdquo;.\nBack in the menu, enter the name of a lab machine followed by .cs.utexas.edu (like when you were SSHing). Then, enter your CS username and password in their respective fields.\nIf you are using SSH keys, select your key file from the dropdown. If you used the default key location (like specified in the guide, select id_rsa).\nYou can now drag and drops files between the Cyberduck file viewer and your Mac\u0026rsquo;s Finder.\nLinux Linux has many, many good SFTP client applications. One of the most popular options is FileZilla (which is actually cross-platform). However, many Linux graphical file managers, like Dolphin, have built-in ways of connecting to SFTP servers and provide a much more seamless experience.\nFile Managers I\u0026rsquo;d recommend first seeing if your file manager can support connecting to SFTP servers. If it can (and you like the experience), stick to that. If your distribution doesn\u0026rsquo;t come with a built-in file manager which supports this, the beauty of Linux allows you to just download a different one! I personally really like KDE\u0026rsquo;s Dolphin File Manager\nMany File Managers (Including the built-in file manager for Ubuntu) will have a Connect to Server option. To access the UTCS machines with this option, use this format to connect to the server:\nsftp://CS_USER@CS_MACHINE.cs.utexas.edu For example,\nsftp://slaberge@linux.cs.utexas.edu FileZilla Otherwise, FileZilla is another good option and you can easily install it using your distro\u0026rsquo;s package manager. On Ubuntu/Debian for example:\nsudo apt-get update sudo apt-get install filezilla  "});index.add({'id':8,'href':'/~slaberge/docs/topics/amortized/','title':"Amortized Analysis",'content':"Amortized Analysis #  Sometimes, using best/worst/average case Big O to describe a function\u0026rsquo;s runtime complexity is misleading or confusing. For example, there are some functions which have a short run time the vast majority of the time but occasionally take longer. Should we describe that function\u0026rsquo;s Big O based on the common runtime complexity or the longer, rarer runtime? Or should both contribute to our description of the function\u0026rsquo;s runtime?\nThis is the motivation for amortized analysis, which essentially describes the \u0026ldquo;average\u0026rdquo; runtime for the function after it is executed some number of times. We can define amortized cost in the same way we think about averages: the sum of the costs for each time we execute the function divided by the number of times we run it. So, if we execute the function \\( n \\) times and define \\(c_i\\) to be the cost of running the function the \\(i^{th} \\) time, then:\n$$ \\text{Amortized Cost} = \\frac{\\sum_{i=1}^{n}{c_i}}{n} $$\nWe can think of the \u0026ldquo;cost\u0026rdquo; of a function as being proportional to its \\( O(N)\\). Although, keep in mind, that this \\(N\\) might be changing with different calls to the function. So, we could also write the definition as:\n$$ \\text{Amortized } O(N) = \\frac{\\sum_{i=1}^{n}{O(N_i)}}{n} $$\n  \\(\\)  "});index.add({'id':9,'href':'/~slaberge/docs/lab_machines/ssh/ssh/','title':"Connecting with SSH",'content':"Connecting with SSH #  We will connect to the Lab Machines using a protocol called SSH (for Secure Shell). SSH allows us to use a computer remotely by sending commands to it and then receiving the resulting output. For CS314, this means you will be able to run and test your assignments on the lab machines.\nPrerequisites #   Make sure you know your CS account username and password Find an available CS machine to connect to with this link If off-campus, make sure you are connected to the VPN or have set up your SSH keys  The SSH Command #  Firstly, you\u0026rsquo;ll need to open your terminal application of choice. On macOS, the default pre-installed terminal is called Terminal. On Windows, the pre-installed Command Prompt will work, too.\nYou should now have a blank prompt which looks something like this:\nNow, we can issue the SSH command to open a connection with one of the UTCS Lab machines:\nssh \u0026lt;CS Username\u0026gt;@\u0026lt;Machine Name\u0026gt;.cs.utexas.edu My username is slaberge and I\u0026rsquo;ll be connecting to the aggravation machine. So the command I\u0026rsquo;ll use looks like:\nssh slaberge@aggravation.cs.utexas.edu Press enter to issue the command. You will be asked to enter your CS account password. If you do not remember it, use this link. If you set up SSH keys, you may be asked for your key\u0026rsquo;s passphrase.\nIf you are on Windows and the ssh command could not be found, you may need to enable it. Try following this tutorial.  The prompt you see will not look exactly like the one above, but if you see the name of the machine you connected to in the prompt, then you successfully connected!\nOnce Connected #  All commands that you run from now on are actually being executed on the lab machine, not your personal computer. The output of the commands is then sent back to your computer for you to see them.\nTo disconnect and end the SSH session, simply enter the following command:\nlogout "});index.add({'id':10,'href':'/~slaberge/docs/lab_machines/','title':"CS Lab Machines",'content':"The CS Department Lab Machines #  This contains a guide for connecting to and using the CS department Linux machines.\nLearning how to connect to and use the lab machines will be extremely important for CS314 and your future CS classes. In 314, the TAs will be compiling and running your code on the lab machines. Therefore, it is your responsibility to make sure your code runs as you intended on the lab machines. We do not grade your code based on how it ran on your personal machine.\nGetting started with using the Lab machines can actually be a tricky process especially if this is your first time using SSH or Linux. Try to set aside some time early in the semester to go through this process and make sure to reach out for help if you get stuck! There are plenty of resources online and you can also ask one of your TAs.\n"});index.add({'id':11,'href':'/~slaberge/docs/lab_machines/tutorials/linux/','title':"Linux Basics",'content':"Linux Basics #  You are about to see a lot of potentially unfamiliar commands below. Don\u0026rsquo;t worry about memorizing all of these right away .\nThe only way of getting familiar with these commands is by using them. So if that means you need to look up a Linux cheat-sheet every time or you print out a list of these on your desk, that\u0026rsquo;s perfectly normal.\nSome of these commands have strange, un-intuitive names which still cause the most experienced Linux users to forget or confuse them.\nSyntax Used #  When a command is shown in a code block, it may be followed by optional or required arguments:\n  Optional arguments will be enclosed with square brackets: [optional].\n  Required arguments will be enclosed with angle brackets: \u0026lt;required\u0026gt;.\n  When you actually enter these commands at a prompt, do not include any brackets.\nFile System Commands #  pwd - Print the current working directory.\npwd  ls - List all of the files in the current directory.\nls [-a Show hidden files] [-l Show as list with details]  rm - Remove (delete) on or more files\nrm \u0026lt;File 1\u0026gt; [File 2] [File 3] ... Once a file is removed, it typically cannot be recovered!\nIf you accidentally remove a file on a lab machine, the CS department occasionally runs backups of everyone\u0026rsquo;s files and you may be able to recover it by contacting the department.\n cd - Change directory\ncd \u0026lt;Directory name\u0026gt; Use cd .. to go up to the parent directory.\n cp - Copy a file\nUsage:\ncp \u0026lt;Source file\u0026gt; \u0026lt;Destination\u0026gt;  mkdir - Create a new directory\nmkdir \u0026lt;New directory name\u0026gt;  rmdir - Delete an empty directory\nrmdir \u0026lt;Directory Name\u0026gt; Other Commands #  cat - Output the contents of a file to the screen\ncat \u0026lt;File name\u0026gt;  more - Output one screenful of a file. Press Enter to scroll down. Press q to quit.\nmore \u0026lt;File name\u0026gt;  nano - Open the nano text editor. Use Control+X to exit (you may be prompted to save, type y or n).\nnano [File name]  vim - Open the vim text editor. To quit, first press Escape then type :q! to quit without saving, or :wq to save and quit.\nvim [File name] How to Learn More About a Command #  Most commands have many arguments you can specify to them. If you want to see all the possible arguments you can provide to a command and what they do, you can check the \u0026ldquo;man\u0026rdquo;, or manual, page for a specific command.\nTo do so:\nman \u0026lt;command name\u0026gt; For example, to learn more about the ls command, you could type:\nman ls If you are still unsure about a command, the next step is to look online for more documentation and examples.\n"});index.add({'id':12,'href':'/~slaberge/docs/exam_review/practice_questions/difficulty/','title':"Problems by Difficulty",'content':"Programming Problems by Difficulty #  Easy #  Insert All Front\nSum Tabs\nGet Grandparent\nHash Table Contains\nMaximum In-Degree\nMedium #  Remove Odd Indices\nSorted List Insert\nReverse Doubly Linked List\nMerge Two Linked Lists\nLinked List Sums\nMost Frequent Element\nHash Set Difference\nHash Table Resize\nHard #  Add to Linked List of Digits\nBinary Subtrees\nVerify Binary Search Trees\nBipartite Graphs\n"});index.add({'id':13,'href':'/~slaberge/docs/lab_machines/tutorials/','title':"Using the Lab Machines",'content':""});index.add({'id':14,'href':'/~slaberge/docs/lab_machines/tutorials/java/','title':"Running Java Programs",'content':"Running Java Programs on Lab Machines #  Transferring your Program to the Lab Machines #  Firstly, transfer all the required .java and input files to the lab machines using an SFTP application of your choice. Put all of these files together in the same directory. I\u0026rsquo;d recommend making a directory just for these files because once we compile your program, it may generate a lot of .class files, and we wouldn\u0026rsquo;t want to clutter up another directory. Now, connect to a lab machine using ssh and navigate to this directory using cd.\nCompiling Your Program #  Once we are in the right directory, issue an ls command. You should be able to see all of your .java and input files.\nNow, make sure you know the name of the class which has your main method. For this example, my main method is in the NameSurfer class, which is in the NameSurfer.java file. So, to compile all of the classes the main method in the NameSurfer class will require, run this command:\njavac \u0026lt;main Method Class Name\u0026gt;.java If your code is free of errors and warnings, you shouldn\u0026rsquo;t see any output.\nNow, if you issue another ls command, you will be able to see all of the .class files as a result of the compilation.\nRunning Your Java Program #  To run your program, you will once again need to know the name of the class which contains your main method. In this example, it is once again NameSurfer. To run your program with this main method, issue the java command:\njava \u0026lt;main Method Class Name\u0026gt; Notice that this command\u0026rsquo;s name, java does not end with a \u0026ldquo;c\u0026rdquo; and you should not include any file extensions to the class name.  If everything was successful, you should be running your Java program on a lab machine!\nMake sure that your program works as intended in this environment since this is how TAs will be grading your assignments.\n"});index.add({'id':15,'href':'/~slaberge/docs/lab_machines/ssh/keys/','title':"SSH Keys",'content':"SSH Keys #  Setting up SSH Keys will allow us to connect to the lab machines from off-campus without needing to use the VPN.\nSSH Keys are also a more secure form of authentication than just passwords. So, if you ever set up a server which is accessible over the internet (say, for a website) in the future, make sure to use SSH Keys for authentication.  Prerequisites #   Make sure you can connect to a lab machine over SSH. This may require using the UT VPN if off-campus.  Creating a Key Pair #  First, we need to create a public/private key pair on our local machine. The public key will be sent to the lab machine whereas the private key should remain on your personal computer and never be shared with anyone.\nTo create a key, run the following command in your terminal or command prompt:\nssh-keygen -t rsa -b 4096 You will then be prompted to choose a location to store the keys. It is recommended to use the default location, so just press Enter without entering anything at the prompt.\nYou will then be prompted to enter a passphrase for this key. The CS Department strongly recommends using a passphrase alongside your keys, although it is not necessary. If you choose to enter a passphrase, you will be prompted to enter it anytime you log into the lab machines from off campus. If you do not want to use a passphrase, press Enter without entering one.\nYou will then be prompted to confirm your passphrase.\nThe output should look similar to below.\nBy default, the public key is stored in a file called id_rsa.pub. On macOS/Linux this file is in the hidden directory called .ssh in your home directory. On Windows it is located in C:\\Users\\\u0026lt;YOUR_USERNAME\u0026gt;\\.ssh\\ by default.\nThe private key is stored in the same directory but named id_rsa. This file should never be moved off of your computer or shared with anyone.\nSending your key to the Lab Machine #  Now, we need to send a copy of our public key to a lab machine Once your key has been copied to one lab machine, it can be used to log in to any other lab machine. Follow the instructions for your operating system:\nmacOS/Linux Type the following command into your terminal. Be sure to replace CS_USER with your CS username.\nssh-copy-id CS_USER@linux.cs.utexas.edu If prompted \u0026ldquo;Are you sure you want to continue connecting?\u0026rdquo; type yes and press Enter. You may need to enter your CS password.\nWindows Type the following command into your command prompt. Be sure to replace CS_USER with your CS username.\n type .ssh\\id_rsa.pub | ssh CS_USER@linux.cs.utexas.edu \u0026quot;umask 0077 \u0026amp;\u0026amp; mkdir -p ~/.ssh \u0026amp;\u0026amp; cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026quot; If prompted \u0026ldquo;Are you sure you want to continue connecting?\u0026rdquo; type yes and press Enter. You may need to enter your CS password.\n If everything was done successfully, you should now be able to log into the lab machines from off-campus (without using the VPN)!\nSources #  This guide is based on UTCS\u0026rsquo;s guide found here.\n"});index.add({'id':16,'href':'/~slaberge/docs/','title':"Docs",'content':""});index.add({'id':17,'href':'/~slaberge/problem_pages/index_template/','title':"Index Template",'content':"Header #  Difficulty:\nProblem Link\nSolution Link\n"});index.add({'id':18,'href':'/~slaberge/problem_pages/add_to_linked_list_digits/','title':"Add Linked Lists of Digits",'content':"Add Linked Lists of Digits #  Difficulty: Hard\nProblem Link\nSolution Link\n"});index.add({'id':19,'href':'/~slaberge/problem_pages/binary_subtrees/','title':"Binary Subtrees",'content':"Binary Subtrees #  Difficulty: Hard\nProblem Link\nSolution Link\n"});index.add({'id':20,'href':'/~slaberge/problem_pages/bipartite_graphs/','title':"Bipartite Graphs",'content':"Bipartite Graphs #  Difficulty: Hard\nProblem Link\nSolution Link\n"});index.add({'id':21,'href':'/~slaberge/docs/exam_review/','title':"Exam Review",'content':""});index.add({'id':22,'href':'/~slaberge/problem_pages/get_grandparent/','title':"Get Grandparent",'content':"Get Grandparent #  Difficulty: Easy\nProblem Link\nSolution Link\n"});index.add({'id':23,'href':'/~slaberge/problem_pages/hash_set_difference/','title':"Hash Set Difference",'content':"Hash Set Difference #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':24,'href':'/~slaberge/problem_pages/hash_table_contains/','title':"Hash Table Contains",'content':"Hash Table Contains #  Difficulty: Easy\nProblem Link\nSolution Link\n"});index.add({'id':25,'href':'/~slaberge/problem_pages/hash_table_resize/','title':"Hash Table Resize",'content':"Hash Table Resize #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':26,'href':'/~slaberge/problem_pages/insert_all_front/','title':"Insert All Front",'content':"Insert All Front #  Difficulty: Easy\nProblem Link\nSolution Link\n"});index.add({'id':27,'href':'/~slaberge/problem_pages/linked_list_sums/','title':"Linked List Sums",'content':"Linked List Sums #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':28,'href':'/~slaberge/problem_pages/maximum_indegree/','title':"Maximum In-Degree",'content':"Maximum In-Degree #  Difficulty: Easy\nProblem Link\nSolution Link\n"});index.add({'id':29,'href':'/~slaberge/problem_pages/merge_two_linked_lists/','title':"Merge Two Linked Lists",'content':"Merge Two Linked Lists #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':30,'href':'/~slaberge/problem_pages/most_frequent_element/','title':"Most Frequent Element",'content':"Most Frequent Element #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':31,'href':'/~slaberge/problem_pages/','title':"Problem_pages",'content':""});index.add({'id':32,'href':'/~slaberge/docs/exam_review/practice_questions/','title':"Programming Problems",'content':"Practice Programming Problems #  This is a collection of all the practice problems I\u0026rsquo;ve written for CS 314.\nIf you think that you\u0026rsquo;ve come up with a better solution for a problem than the one I provided, be sure to share it with me! If you suspect a provided solution is wrong, also let me know!\nDisclaimer: These study materials are meant to be supplementary to the study materials Mike provides on his site. I\u0026rsquo;ve written these problems to be as similar as possible to the kinds of problems you could see on an exam, but looking at the past exams will always be more representative of what you can expect to see on future exams.\n  Problems by Topic   Programming problems sorted by the topic they cover   Problems by Difficulty   Programming problems sorted by their difficulty*   * Just a rough estimate, perception of difficulty varies for everybody. "});index.add({'id':33,'href':'/~slaberge/problem_pages/remove_odd_indices/','title':"Remove Odd Indices",'content':"Remove Odd Indices #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':34,'href':'/~slaberge/problem_pages/reverse_doubly_linked_list/','title':"Reverse Doubly-Linked List",'content':"Reverse Doubly-Linked List #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':35,'href':'/~slaberge/docs/lab_machines/tutorials/gui/','title':"Running GUI Programs",'content':"Running Graphical Programs Over SSH #  Although SSH connections are done through a command line interface, it is actually possible to run graphical applications over SSH using X-forwarding.\nThis trick can be useful for CS314 because some of our assignments use a GUI window. If you want to test one of these graphical programs on the lab machines, you\u0026rsquo;ll need to use X-forwarding. If you do not have X-forwarding enabled, you\u0026rsquo;ll get an exception which looks similar to this:\nException in thread \u0026quot;main\u0026quot; java.awt.HeadlessException: No X11 DISPLAY variable was set, but this program performed an operation which requires it. at java.desktop/java.awt.GraphicsEnvironment.checkHeadless(GraphicsEnvironment.java:208) at java.desktop/java.awt.Window.\u0026lt;init\u0026gt;(Window.java:548) at java.desktop/java.awt.Frame.\u0026lt;init\u0026gt;(Frame.java:423) at java.desktop/javax.swing.JFrame.\u0026lt;init\u0026gt;(JFrame.java:224) at DrawingPanel.\u0026lt;init\u0026gt;(DrawingPanel.java:87) at Recursive.drawCarpet(Recursive.java:188) at RecursiveTester.doCarpetTest(RecursiveTester.java:33) at RecursiveTester.main(RecursiveTester.java:27)  Windows One-Time Setup Windows does not have a built-in X-Windows server so we\u0026rsquo;ll need to install one. Xming is a free and popular choice. You can download the installer here.\nOpen a command prompt and type the following commands:\nmkdir \\dev echo x \u0026gt; \\dev\\tty Every-Time Setup Make sure that Xming is running (it will be in the system tray when running). Then, when connecting to the lab machine, you\u0026rsquo;ll need to add an extra argument to the ssh command:\nset DISPLAY=localhost:0 echo x \u0026gt; \\dev\\tty ssh -Y CS_USER@CS_MACHINE.cs.utexas.edu macOS One-Time Setup macOS does not have a built-in X-Windows server so we\u0026rsquo;ll need to install one. XQuartz is free, open source and a popular option for macOS. You can download the installer here.\nEvery-Time Setup Once that is complete, you need to add an extra argument to the ssh command you use to connect to the lab machine:\nssh -X CS_USER@CS_MACHINE.cs.utexas.edu Linux One-Time Setup None! Linux is by far the easiest platform for using X-Forwarding because it has XWindows built in!\nEvery-Time Setup All you need to do is add an extra argument to the ssh command you use to connect to the lab machine:\nssh -X CS_USER@CS_MACHINE.cs.utexas.edu  To test if enabling X-forwarding worked, try running this command on the lab machine over SSH:\nxcowsay \u0026quot;Hello, World\\!\u0026quot; If you see the message on your screen, it worked! You should now be able to run your graphical Java programs.\n"});index.add({'id':36,'href':'/~slaberge/problem_pages/sorted_list_insert/','title':"Sorted List Insert",'content':"Sorted List Insert #  Difficulty: Medium\nProblem Link\nSolution Link\n"});index.add({'id':37,'href':'/~slaberge/problem_pages/sum_tabs/','title':"Sum Tabs",'content':"Sum Tabs #  Difficulty: Easy\nProblem Link\nSolution Link\n"});index.add({'id':38,'href':'/~slaberge/problem_pages/verify_bst/','title':"Verify BST",'content':"Verify Binary Search Tree #  Difficulty: Hard\nProblem Link\nSolution Link\n"});})();